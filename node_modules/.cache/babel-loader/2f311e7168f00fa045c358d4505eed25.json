{"ast":null,"code":"// // export default class App extends Component {\n// // \tconstructor(props) {\n// // \t  super(props);\n// // \t  this.state = {\n// // \t\t isActive: true\n// // \t  };\n// // \t}\n// //    componentDidMount() {\n// // \t  this.intervalId = setInterval(() => {\n// // \t\tthis.randomCallObject();\n// // \t  }, 5000);\n// // \t}\n// // \trandomCallObject() {\n// // \t\tthis.setState({\n// // \t\tActive: !this.state.isActive\n// // \t  });\n// // \t}\n// // \trender() {\n// // \t   let clock= {\n// // \t\t\ttime: 150,\n// // \t\t\tisActive:this.state.isActive\n// // \t\t  }\n// // \t  let clock2= {\n// // \t\t\ttime: 100,\n// // \t\t\tisActive:!this.state.isActive\n// // \t\t  }\n// // \t  return (\n// // \t   <div className=\"container\">\n// // \t\t  <Clcok ClockData={clock}/>\n// // \t\t  <Clcok ClockData={clock2}/>\n// // \t\t</div>\n// // \t  );\n// // \t}\n// //   }\n//   import React, { Component } from \"react\";\n//   const TOTAL_MINUTES = 60;\n//   export default class ClockComponent extends Component {\n// \tconstructor(props) {\n// \t  super(props);\n// \t  this.state = {\n// \t\ttime: props.ClockData.time,\n// \t\tisActive: props.ClockData.isActive\n// \t  };\n// \t}\n// \tcomponentDidMount() {\n// \t  const { isActive } = this.state;\n// \t  if (isActive === true) {\n// \t\tthis.intervalId = setInterval(() => {\n// \t\t  const { time } = this.state;\n// \t\t  if (time > 0) {\n// \t\t\tthis.setState({\n// \t\t\t  time: time + 1\n// \t\t\t});\n// \t\t  }\n// \t\t}, 1000);\n// \t  }\n// \t}\n// \tcomponentWillUnmount() {\n// \t  clearInterval(this.intervalId);\n// \t}\n// \t render() {\n// \t  const { time } = this.state;\n// \t  let minutes =\"\" + Math.floor((time % (TOTAL_MINUTES * TOTAL_MINUTES))/ TOTAL_MINUTES);\n// \t  let seconds = \"\" + Math.floor(time % TOTAL_MINUTES);\n// \t  if (isNaN(minutes) || isNaN(seconds)) {\n// \t\treturn null;\n// \t  }\n// \t  if (minutes.length === 1) {\n// \t\tminutes = `0${minutes}`;\n// \t  }\n// \t  if (seconds.length === 1) {\n// \t\tseconds = `0${seconds}`;\n// \t  }\n// \t  return (\n// \t   <div className=\"row\">\n// \t\t  <div className=\"col-md-1\">\n// \t\t  <div> \n// \t\t\t  {minutes}:{seconds}\n// \t\t </div>\n// \t\t  </div>\n// \t\t </div>\n// \t   );\n// \t}\n//   }","map":{"version":3,"sources":["C:/Users/HP/Desktop/games/src/components/Control.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// // export default class App extends Component {\r\n// // \tconstructor(props) {\r\n// // \t  super(props);\r\n// // \t  this.state = {\r\n// // \t\t isActive: true\r\n// // \t  };\r\n// // \t}\r\n// //    componentDidMount() {\r\n// // \t  this.intervalId = setInterval(() => {\r\n// // \t\tthis.randomCallObject();\r\n// // \t  }, 5000);\r\n// // \t}\r\n// // \trandomCallObject() {\r\n// // \t\tthis.setState({\r\n// // \t\tActive: !this.state.isActive\r\n// // \t  });\r\n// // \t}\r\n// // \trender() {\r\n// // \t   let clock= {\r\n// // \t\t\ttime: 150,\r\n// // \t\t\tisActive:this.state.isActive\r\n// // \t\t  }\r\n// // \t  let clock2= {\r\n// // \t\t\ttime: 100,\r\n// // \t\t\tisActive:!this.state.isActive\r\n// // \t\t  }\r\n// // \t  return (\r\n// // \t   <div className=\"container\">\r\n// // \t\t  <Clcok ClockData={clock}/>\r\n// // \t\t  <Clcok ClockData={clock2}/>\r\n// // \t\t</div>\r\n// // \t  );\r\n// // \t}\r\n// //   }\r\n//   import React, { Component } from \"react\";\r\n//   const TOTAL_MINUTES = 60;\r\n//   export default class ClockComponent extends Component {\r\n// \tconstructor(props) {\r\n// \t  super(props);\r\n// \t  this.state = {\r\n// \t\ttime: props.ClockData.time,\r\n// \t\tisActive: props.ClockData.isActive\r\n// \t  };\r\n// \t}\r\n// \tcomponentDidMount() {\r\n// \t  const { isActive } = this.state;\r\n// \t  if (isActive === true) {\r\n// \t\tthis.intervalId = setInterval(() => {\r\n// \t\t  const { time } = this.state;\r\n// \t\t  if (time > 0) {\r\n// \t\t\tthis.setState({\r\n// \t\t\t  time: time + 1\r\n// \t\t\t});\r\n// \t\t  }\r\n// \t\t}, 1000);\r\n// \t  }\r\n// \t}\r\n// \tcomponentWillUnmount() {\r\n// \t  clearInterval(this.intervalId);\r\n// \t}\r\n// \t render() {\r\n// \t  const { time } = this.state;\r\n// \t  let minutes =\"\" + Math.floor((time % (TOTAL_MINUTES * TOTAL_MINUTES))/ TOTAL_MINUTES);\r\n// \t  let seconds = \"\" + Math.floor(time % TOTAL_MINUTES);\r\n// \t  if (isNaN(minutes) || isNaN(seconds)) {\r\n// \t\treturn null;\r\n// \t  }\r\n// \t  if (minutes.length === 1) {\r\n// \t\tminutes = `0${minutes}`;\r\n// \t  }\r\n// \t  if (seconds.length === 1) {\r\n// \t\tseconds = `0${seconds}`;\r\n// \t  }\r\n// \t  return (\r\n// \t   <div className=\"row\">\r\n// \t\t  <div className=\"col-md-1\">\r\n// \t\t  <div> \r\n// \t\t\t  {minutes}:{seconds}\r\n// \t\t </div>\r\n// \t\t  </div>\r\n// \t\t </div>\r\n// \t   );\r\n// \t}\r\n//   }"]},"metadata":{},"sourceType":"module"}