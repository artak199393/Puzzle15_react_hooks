{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\HP\\\\Desktop\\\\games\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\games\\\\src\\\\components\\\\Time.js\";\nimport React, { useState, useEffect } from 'react'; //let interval = null;\n\nconst Timer = () => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        seconds = _useState2[0],\n        setSeconds = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isActive = _useState4[0],\n        setIsActive = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        minutes = _useState6[0],\n        setMinutes = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        interval = _useState8[0],\n        setSecundInterval = _useState8[1];\n\n  function toggle() {\n    setIsActive(!isActive);\n    startStopTimer(!isActive);\n  }\n\n  function reset() {\n    setSeconds(0);\n    setMinutes(0);\n    setIsActive(false);\n  }\n\n  const startStopTimer = pActive => {\n    if (pActive) {\n      const startInterval = setInterval(() => {\n        const ttt = seconds;\n        console.log(ttt);\n\n        if (seconds === 5) {\n          setMinutes(minutes => minutes + 1);\n          setSeconds(0);\n        } else {\n          setSeconds(seconds => seconds + 1);\n        }\n      }, 1000);\n      setSecundInterval(startInterval);\n    } else {\n      clearInterval(interval);\n    }\n  }; // useEffect(() => {\n  // \tif (isActive) {  \n  // \t\tconst startInterval = setInterval(() => {\n  // \t\t\tconsole.log(seconds);\n  // \t\t\tif(seconds == 5) {\n  // \t\t\t\tsetMinutes(minutes => minutes + 1);\n  // \t\t\t\tsetSeconds(0);\n  // \t\t\t}else{\n  // \t\t\t\tsetSeconds(seconds => seconds + 1);\n  // \t\t\t}\n  // \t\t  }, 1000);\n  // \t\t  setSecundInterval(startInterval);\n  // \t} else {\n  // \t\tconsole.log(interval);\n  // \t\tclearInterval(interval);\n  // \t}\n  // \t},\n  //   \t[isActive]\n  // );\n  // useEffect(() => {\n  // \tlet interval = null;\n  // \tconsole.log(\"second\");\n  // \tif (isActive) {\n  //   \t\tinterval = setInterval(() => {\n  //     \t\tsetMinutes(minutes => minutes + 1);\n  //   \t\t}, 60000);\n  // \t} else if (!isActive && minutes !== 0) {\n  //   \t\tclearInterval(interval);\n  // \t}\n  // \treturn () => clearInterval(interval);\n  // \t  },\n  // \t[isActive, minutes]\n  // );\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, minutes, \":\", seconds), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"button button-primary button-primary-\".concat(isActive ? 'active' : 'inactive'),\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, isActive ? 'Pause' : 'Start'), React.createElement(\"button\", {\n    className: \"button\",\n    onClick: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Reset\")));\n};\n\nexport default Timer;","map":{"version":3,"sources":["C:/Users/HP/Desktop/games/src/components/Time.js"],"names":["React","useState","useEffect","Timer","seconds","setSeconds","isActive","setIsActive","minutes","setMinutes","interval","setSecundInterval","toggle","startStopTimer","reset","pActive","startInterval","setInterval","ttt","console","log","clearInterval"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA,oBACWF,QAAQ,CAAC,CAAD,CADnB;AAAA;AAAA,QACZG,OADY;AAAA,QACHC,UADG;;AAAA,qBAEeJ,QAAQ,CAAC,KAAD,CAFvB;AAAA;AAAA,QAEVK,QAFU;AAAA,QAEAC,WAFA;;AAAA,qBAGWN,QAAQ,CAAC,CAAD,CAHnB;AAAA;AAAA,QAGZO,OAHY;AAAA,QAGHC,UAHG;;AAAA,qBAImBR,QAAQ,CAAC,IAAD,CAJ3B;AAAA;AAAA,QAIZS,QAJY;AAAA,QAIFC,iBAJE;;AAMjB,WAASC,MAAT,GAAkB;AACnBL,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACAO,IAAAA,cAAc,CAAC,CAACP,QAAF,CAAd;AACE;;AAED,WAASQ,KAAT,GAAiB;AACfT,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAI,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAF,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAED,QAAMM,cAAc,GAAIE,OAAD,IAAa;AACrC,QAAIA,OAAJ,EAAa;AACZ,YAAMC,aAAa,GAAGC,WAAW,CAAC,MAAM;AACvC,cAAMC,GAAG,GAAGd,OAAZ;AACAe,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,YAAGd,OAAO,KAAK,CAAf,EAAkB;AACjBK,UAAAA,UAAU,CAACD,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAV;AACAH,UAAAA,UAAU,CAAC,CAAD,CAAV;AACA,SAHD,MAGK;AACJA,UAAAA,UAAU,CAACD,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAV;AACA;AACA,OAT+B,EAS7B,IAT6B,CAAjC;AAUCO,MAAAA,iBAAiB,CAACK,aAAD,CAAjB;AACD,KAZD,MAYO;AACNK,MAAAA,aAAa,CAACX,QAAD,CAAb;AACA;AAEC,GAjBD,CAjBiB,CAoCjB;AACC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACH;AACA;AACG;AACD;AACF;AACA;AACE;AACF;AACA;AACG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACA;AACA;;;AAEC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMF,OAAN,OACGJ,OADH,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,iDAA0CE,QAAQ,GAAG,QAAH,GAAc,UAAhE,CAAjB;AAA+F,IAAA,OAAO,EAAEM,MAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,QAAQ,GAAG,OAAH,GAAa,OADxB,CADF,EAIE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEQ,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,CAJF,CADF;AAeD,CArFD;;AAsFA,eAAeX,KAAf","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n//let interval = null;\r\n\r\nconst Timer = () => {\r\n\tconst [seconds, setSeconds] = useState(0);\r\n  \tconst [isActive, setIsActive] = useState(false);\r\n\tconst [minutes, setMinutes] = useState(0);\r\n\tconst [interval, setSecundInterval] = useState(null);  \r\n\r\n  \tfunction toggle() {\t\r\n\t\tsetIsActive(!isActive);\r\n\t\tstartStopTimer(!isActive);\r\n  \t}\r\n\r\n  \tfunction reset() {\r\n    \tsetSeconds(0);\r\n    \tsetMinutes(0);\r\n    \tsetIsActive(false);\r\n\t  }\r\n\t  \r\n\t  const startStopTimer = (pActive) => {\r\n\t\tif (pActive) {  \r\n\t\t\tconst startInterval = setInterval(() => {\r\n\t\t\t\tconst ttt = seconds;\r\n\t\t\t\tconsole.log(ttt);\r\n\t\t\t\tif(seconds === 5) {\r\n\t\t\t\t\tsetMinutes(minutes => minutes + 1);\r\n\t\t\t\t\tsetSeconds(0);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tsetSeconds(seconds => seconds + 1);\r\n\t\t\t\t}\r\n\t\t\t\t}, 1000);\r\n\t\t\t\tsetSecundInterval(startInterval);\r\n\t\t} else {\r\n\t\t\tclearInterval(interval);\r\n\t\t}\r\n\r\n\t  }\r\n\r\n  \t// useEffect(() => {\r\n    // \tif (isActive) {  \r\n\t// \t\tconst startInterval = setInterval(() => {\r\n\t// \t\t\tconsole.log(seconds);\r\n\t// \t\t\tif(seconds == 5) {\r\n\t// \t\t\t\tsetMinutes(minutes => minutes + 1);\r\n\t// \t\t\t\tsetSeconds(0);\r\n\t// \t\t\t}else{\r\n\t// \t\t\t\tsetSeconds(seconds => seconds + 1);\r\n\t// \t\t\t}\r\n\t// \t\t  }, 1000);\r\n\t// \t\t  setSecundInterval(startInterval);\r\n    // \t} else {\r\n\t// \t\tconsole.log(interval);\r\n\t// \t\tclearInterval(interval);\r\n    // \t}\r\n  \t// \t},\r\n\t//   \t[isActive]\r\n\t// );\r\n  \t// useEffect(() => {\r\n\t// \tlet interval = null;\r\n\t// \tconsole.log(\"second\");\r\n    // \tif (isActive) {\r\n    //   \t\tinterval = setInterval(() => {\r\n    //     \t\tsetMinutes(minutes => minutes + 1);\r\n    //   \t\t}, 60000);\r\n    // \t} else if (!isActive && minutes !== 0) {\r\n    //   \t\tclearInterval(interval);\r\n    // \t}\r\n    // \treturn () => clearInterval(interval);\r\n\t// \t  },\r\n\t// \t[isActive, minutes]\r\n\t// );\r\n\r\n  return (\r\n    <div >\r\n      <div>{minutes}:\r\n        {seconds}\r\n      </div>\r\n      <div>\r\n        <button className={`button button-primary button-primary-${isActive ? 'active' : 'inactive'}`} onClick={toggle}>\r\n          {isActive ? 'Pause' : 'Start'}\r\n        </button>\r\n        <button className=\"button\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Timer;"]},"metadata":{},"sourceType":"module"}